//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\HexquisiteLevel.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

#pragma warning disable CS3021
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class HexquisiteLevelLexer : Lexer {
#pragma warning restore CS3021
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, INT=12, NEWLINE=13, WHITESPACE=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "INT", "NEWLINE", "WHITESPACE"
	};


	public HexquisiteLevelLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HexquisiteLevelLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'V'", "'K'", "'{'", "'}'", "'S'", "'G'", "'W'", "'A'", "'('", "','", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"INT", "NEWLINE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HexquisiteLevel.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HexquisiteLevelLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,70,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,
		0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
		1,9,1,10,1,10,1,11,4,11,53,8,11,11,11,12,11,54,1,12,4,12,58,8,12,11,12,
		12,12,59,1,12,1,12,1,13,4,13,65,8,13,11,13,12,13,66,1,13,1,13,0,0,14,1,
		1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,1,
		0,3,1,0,48,57,2,0,10,10,13,13,2,0,9,9,32,32,72,0,1,1,0,0,0,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
		0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
		27,1,0,0,0,1,29,1,0,0,0,3,31,1,0,0,0,5,33,1,0,0,0,7,35,1,0,0,0,9,37,1,
		0,0,0,11,39,1,0,0,0,13,41,1,0,0,0,15,43,1,0,0,0,17,45,1,0,0,0,19,47,1,
		0,0,0,21,49,1,0,0,0,23,52,1,0,0,0,25,57,1,0,0,0,27,64,1,0,0,0,29,30,5,
		86,0,0,30,2,1,0,0,0,31,32,5,75,0,0,32,4,1,0,0,0,33,34,5,123,0,0,34,6,1,
		0,0,0,35,36,5,125,0,0,36,8,1,0,0,0,37,38,5,83,0,0,38,10,1,0,0,0,39,40,
		5,71,0,0,40,12,1,0,0,0,41,42,5,87,0,0,42,14,1,0,0,0,43,44,5,65,0,0,44,
		16,1,0,0,0,45,46,5,40,0,0,46,18,1,0,0,0,47,48,5,44,0,0,48,20,1,0,0,0,49,
		50,5,41,0,0,50,22,1,0,0,0,51,53,7,0,0,0,52,51,1,0,0,0,53,54,1,0,0,0,54,
		52,1,0,0,0,54,55,1,0,0,0,55,24,1,0,0,0,56,58,7,1,0,0,57,56,1,0,0,0,58,
		59,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,61,1,0,0,0,61,62,6,12,0,0,62,
		26,1,0,0,0,63,65,7,2,0,0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,
		67,1,0,0,0,67,68,1,0,0,0,68,69,6,13,0,0,69,28,1,0,0,0,4,0,54,59,66,1,6,
		0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
